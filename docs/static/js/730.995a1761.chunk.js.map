{"version":3,"file":"static/js/730.995a1761.chunk.js","mappings":"05BAOA,MAAMA,EAAU,CAACC,EAASC,EAAMD,GAuShC,EArSeE,KAAO,IAADC,EACnB,MAAM,OACJC,EAAM,OACNC,EAAM,UACNC,EAAS,WACTC,EAAU,cACVC,EAAa,cACbC,EAAa,iBACbC,IACEC,EAAAA,EAAAA,YAAWC,EAAAA,GACTC,EAAiBA,KACrB,MAAMC,EAAc,GACpB,IAAIC,EAAQ,EACZ,IAAK,MAAMC,KAAcZ,EAAOC,OAAOY,eAAgB,CACrDH,EAAYI,KAAK,IACjB,IAAK,MAAMC,KAAYf,EAAOC,OAAOY,eAAeD,GAClDF,EAAYC,GAAOG,KACjBd,EAAOC,OAAOY,eAAeD,GAAYG,IAG7CJ,GACF,CACA,OAAOD,CAAW,EAGdM,EAA0BC,IAC9B,MAAMC,EAAQT,IACRU,EAAcD,EAAME,OAAS,EAC7BC,EAAaH,EAAMf,EAAWmB,UAAUF,OAAS,EAC7C,MAANH,IAEAd,EAAWoB,UAAYF,GACvBlB,EAAWmB,SAAWH,EAEtBf,EAAc,CAAEkB,SAAUnB,EAAWmB,SAAW,EAAGC,QAAS,IAE5DpB,EAAWoB,QAAUF,GACrBlB,EAAWmB,UAAYH,GAEvBf,EAAc,CACZkB,SAAUnB,EAAWmB,SACrBC,QAASpB,EAAWoB,QAAU,KAI1B,MAANN,IACyB,IAAvBd,EAAWoB,SAAyC,IAAxBpB,EAAWmB,SACzClB,EAAc,CACZkB,SAAUnB,EAAWmB,SAAW,EAChCC,QAASL,EAAMf,EAAWmB,SAAW,GAAGF,OAAS,IAEnB,IAAvBjB,EAAWoB,SACpBnB,EAAc,CACZkB,SAAUnB,EAAWmB,SACrBC,QAASpB,EAAWoB,QAAU,IAGpC,EAeIC,EAAeC,IAAU,IAADC,EAC5B,MAAMC,EAAgBxB,EAAWmB,SAC3BM,EAAezB,EAAWoB,QAC1BD,EAAWO,OAAOC,KAAK7B,GAAQ0B,GAC/BJ,EAAUM,OAAOC,KAAK7B,EAAOqB,IAAWM,GACxCG,EAAQ9B,EAAOqB,GAAUC,GAC/B,OAAQE,GACN,IAAK,OACL,IAAK,SACH,OAAOM,EACT,IAAK,SACH,MAAMC,EAAIvB,IAAiBkB,GAAeC,GAC1C,OAAgB,QAATF,EAAAM,EAAEC,eAAO,IAAAP,OAAA,EAATA,EAAWQ,QAAQH,KAAUC,EAAEG,OAAS,GACjD,QACE,OACJ,EAGIC,EAAeC,IACnB,MAAMV,EAAgBxB,EAAWmB,SAC3BM,EAAezB,EAAWoB,QAC1BD,EAAWO,OAAOC,KAAK7B,GAAQ0B,GAC/BJ,EAAUM,OAAOC,KAAK7B,EAAOqB,IAAWM,GAC9C1B,GAAWoC,IAAU,IAChBA,EACH,CAAChB,GAAW,IACPgB,EAAWhB,GACd,CAACC,GAAUc,MAEZ,EAQL,OACEE,EAAAA,EAAAA,KAAA,WAASC,UAAU,MAAKC,UACtBF,EAAAA,EAAAA,KAAA,OAAAE,UACEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SACGzC,EAAOC,OAAO0C,MAAMC,KAAKC,KAAI,CAACC,EAAInC,KACjC4B,EAAAA,EAAAA,KAAA,MAEEQ,MAAO,CACLC,gBACErC,IAAUN,EAAgB,mBAAqB,WAEnD4C,QAASA,IAlBGtC,KAC1BL,EAAiBK,GACjBT,EAAUP,EAAQgB,GAAO,EAgBIuC,CAAmBvC,GAAO8B,SAExCK,GAPInC,UAYb+B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,MAAAE,SACGhC,IAAiBN,EAAWmB,UAAUnB,EAAWoB,SAC/C4B,MAAQ,eAEbZ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAGb,QAFZ1C,EAAAU,IAAiBN,EAAWmB,UAC3BnB,EAAWoB,SACX6B,mBAAW,IAAArD,OAAA,EAFZA,EAEc8C,KAAI,CAACQ,EAAMC,KACxBf,EAAAA,EAAAA,KAAA,SAAAE,SAAgBY,GAAJC,QACRf,EAAAA,EAAAA,KAAA,SAAAE,SAAQ,oBAGlBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,iBAAgBC,SArF5Bc,MACjB,MAAMrC,EAAQT,IACd,IAAI+C,EAAQ,EACVC,EAAU,EAMZ,OALAvC,EAAM2B,KAAKa,GAAWF,GAASE,EAAMtC,SACrCF,EAAMyC,OAAO,EAAGxD,EAAWmB,SAAW,GAAGuB,KAAI,CAACa,EAAOJ,IAC/CnD,EAAWmB,SAAWgC,EAAWG,GAAWC,EAAMtC,OACzCqC,GAAWC,EAAMC,OAAO,EAAGxD,EAAWoB,QAAU,GAAGH,SAE5D,GAANwC,OAAUH,EAAO,KAAAG,OAAIJ,EAAK,EA4EqBD,MACnCb,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,UAAQU,QAASA,IAAMjC,EAAuB,KAAKyB,UACjDF,EAAAA,EAAAA,KAAA,SAAAE,SAAQ,SAEVF,EAAAA,EAAAA,KAAA,UAAQU,QAASA,IAAMjC,EAAuB,KAAKyB,UACjDF,EAAAA,EAAAA,KAAA,SAAAE,SAAQ,eAIdF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,qBAAoBC,SAChC,EAAC,GAAO,GAAMoB,SACbpD,IAAiBN,EAAWmB,UAAUnB,EAAWoB,SAASuC,OAE1DvB,EAAAA,EAAAA,KAAA,SACEY,KAAK,iBACLW,KAAK,WACLC,QAASvC,EAAY,QACrBwC,SAAW/C,GAAMmB,GAAaZ,EAAY,WAE1Cf,IAAiBN,EAAWmB,UAAUnB,EAAWoB,SAChDU,SACHM,EAAAA,EAAAA,KAAA,UACEY,KAAK,0BACLpB,MAAOP,EAAY,UACnBwC,SAAW/C,GACTmB,EACE3B,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACXU,QACAgC,OAAOhD,EAAEiD,OAAOnC,OACdtB,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACXY,QAGTM,SAEAhC,IAAiBN,EAAWmB,UAC3BnB,EAAWoB,SACXU,QAAQY,KAAI,CAACsB,EAAQb,KACrBf,EAAAA,EAAAA,KAAA,UAEER,MACEuB,EACA7C,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACXY,MACHM,SAEA0B,GARIb,OAYT7C,IAAiBN,EAAWmB,UAAUnB,EAAWoB,SAChD6C,KACH1B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,sBAAqBC,SAAA,EAClCF,EAAAA,EAAAA,KAAA,SAAAE,SAEIhC,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACX8C,OAGN3B,EAAAA,EAAAA,MAAA,OAAKF,UAAU,qBAAoBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,SACEuB,KAAK,SACLX,KAAK,eACLpB,MAAOP,EAAY,UACnBwC,SAAW/C,IACT,KACEA,EAAEiD,OAAOnC,MACPtB,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACX8C,KACJpD,EAAEiD,OAAOnC,MACPtB,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACX6C,KAGN,OAAOhC,EAAY6B,OAAOhD,EAAEiD,OAAOnC,OAAO,EAE5CsC,IACE5D,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACX8C,IAEJD,IACE3D,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACX6C,OAGN7B,EAAAA,EAAAA,KAAA,SACEuB,KAAK,QACL/B,MAAOP,EAAY,UACnBwC,SAAW/C,GAAMmB,EAAY6B,OAAOhD,EAAEiD,OAAOnC,QAC7CsC,IACE5D,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACX8C,IAEJD,IACE3D,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACX6C,UAIR7B,EAAAA,EAAAA,KAAA,SAAAE,SAEIhC,IAAiBN,EAAWmB,UAC1BnB,EAAWoB,SACX6C,cAINE,WAIV5B,EAAAA,EAAAA,MAAA,SAAAD,SAAA,CACGzC,EAAOC,OAAO0C,MAAM4B,OACrBhC,EAAAA,EAAAA,KAAA,KACEiC,KAAI,gCAAAZ,OAAkCa,mBACpCC,KAAKC,UAAU1E,EAAQ,KAAM,KAE/BiE,OAAO,SACPU,IAAI,aACJC,SAAU,oBACV5B,QAASA,IACP6B,QAAQC,IACN,2BAA6BL,KAAKC,UAAU1E,EAAQ,KAAM,GAC1D,kBAEHwC,SAEAzC,EAAOC,OAAO0C,MAAMqC,OAEtBhF,EAAOC,OAAO0C,MAAMsC,eAInB,C","sources":["pages/preset/Preset.jsx"],"sourcesContent":["import \"./Preset.css\";\r\nimport { useContext } from \"react\";\r\nimport { PageContext } from \"../../utils/contexts/PageContext\";\r\n\r\nimport Example from \"../../utils/presets/Example.json\";\r\nimport Fast from \"../../utils/presets/Fast.json\";\r\n\r\nconst presets = [Example, Fast, Example];\r\n\r\nconst Preset = () => {\r\n  const {\r\n    locale,\r\n    preset,\r\n    setPreset,\r\n    infosIndex,\r\n    setInfosIndex,\r\n    choosedPreset,\r\n    setChoosedPreset,\r\n  } = useContext(PageContext);\r\n  const getPresetInfos = () => {\r\n    const presetArray = [];\r\n    let index = 0;\r\n    for (const categories in locale.preset.configurations) {\r\n      presetArray.push([]);\r\n      for (const settings in locale.preset.configurations[categories]) {\r\n        presetArray[index].push(\r\n          locale.preset.configurations[categories][settings]\r\n        );\r\n      }\r\n      index++;\r\n    }\r\n    return presetArray;\r\n  };\r\n\r\n  const handleInfosIndexChange = (e) => {\r\n    const array = getPresetInfos();\r\n    const categoryMax = array.length - 1;\r\n    const settingMax = array[infosIndex.category].length - 1;\r\n    if (e === \"+\") {\r\n      if (\r\n        infosIndex.setting === settingMax &&\r\n        infosIndex.category < categoryMax\r\n      ) {\r\n        setInfosIndex({ category: infosIndex.category + 1, setting: 0 });\r\n      } else if (\r\n        infosIndex.setting < settingMax &&\r\n        infosIndex.category <= categoryMax\r\n      ) {\r\n        setInfosIndex({\r\n          category: infosIndex.category,\r\n          setting: infosIndex.setting + 1,\r\n        });\r\n      }\r\n    }\r\n    if (e === \"-\") {\r\n      if (infosIndex.setting === 0 && infosIndex.category !== 0) {\r\n        setInfosIndex({\r\n          category: infosIndex.category - 1,\r\n          setting: array[infosIndex.category - 1].length - 1,\r\n        });\r\n      } else if (infosIndex.setting !== 0) {\r\n        setInfosIndex({\r\n          category: infosIndex.category,\r\n          setting: infosIndex.setting - 1,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const countPages = () => {\r\n    const array = getPresetInfos();\r\n    let count = 0,\r\n      current = 0;\r\n    array.map((pages) => (count += pages.length));\r\n    array.splice(0, infosIndex.category + 1).map((pages, i) => {\r\n      if (infosIndex.category > i) return (current += pages.length);\r\n      else return (current += pages.splice(0, infosIndex.setting + 1).length);\r\n    });\r\n    return `${current}/${count}`;\r\n  };\r\n\r\n  const createValue = (info) => {\r\n    const categoryIndex = infosIndex.category;\r\n    const settingIndex = infosIndex.setting;\r\n    const category = Object.keys(preset)[categoryIndex];\r\n    const setting = Object.keys(preset[category])[settingIndex];\r\n    const value = preset[category][setting];\r\n    switch (info) {\r\n      case \"bool\":\r\n      case \"number\":\r\n        return value;\r\n      case \"select\":\r\n        const d = getPresetInfos()[categoryIndex][settingIndex];\r\n        return d.choises?.indexOf(value) + (d.adder || 0);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const updateValue = (newValue) => {\r\n    const categoryIndex = infosIndex.category;\r\n    const settingIndex = infosIndex.setting;\r\n    const category = Object.keys(preset)[categoryIndex];\r\n    const setting = Object.keys(preset[category])[settingIndex];\r\n    setPreset((prevPreset) => ({\r\n      ...prevPreset,\r\n      [category]: {\r\n        ...prevPreset[category],\r\n        [setting]: newValue,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleChoosePreset = (index) => {\r\n    setChoosedPreset(index);\r\n    setPreset(presets[index]);\r\n  };\r\n\r\n  return (\r\n    <section className=\"App\">\r\n      <div>\r\n        <div className=\"preset-container\">\r\n          <div className=\"preset-list\">\r\n            <ul>\r\n              {locale.preset.texts.list.map((li, index) => (\r\n                <li\r\n                  key={index}\r\n                  style={{\r\n                    backgroundColor:\r\n                      index === choosedPreset ? \"var(--primary15)\" : \"inherit\",\r\n                  }}\r\n                  onClick={() => handleChoosePreset(index)}\r\n                >\r\n                  {li}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className=\"preset-choises\">\r\n            <div className=\"preset-text\">\r\n              <h5>\r\n                {getPresetInfos()[infosIndex.category][infosIndex.setting]\r\n                  .name || \"Not Found\"}\r\n              </h5>\r\n              <div className=\"preset-desc\">\r\n                {getPresetInfos()[infosIndex.category][\r\n                  infosIndex.setting\r\n                ].description?.map((desc, i) => (\r\n                  <small key={i}>{desc}</small>\r\n                )) || <small>{\"Not Found\"}</small>}\r\n              </div>\r\n            </div>\r\n            <div className=\"preset-footer\">\r\n              <div className=\"preset-pagesFooter\">\r\n                <small className=\"preset-counter\">{countPages()}</small>\r\n                <div className=\"preset-btns\">\r\n                  <button onClick={() => handleInfosIndexChange(\"-\")}>\r\n                    <small>{\"-\"}</small>\r\n                  </button>\r\n                  <button onClick={() => handleInfosIndexChange(\"+\")}>\r\n                    <small>{\"+\"}</small>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=\"preset-inputFooter\">\r\n                {[false, true].includes(\r\n                  getPresetInfos()[infosIndex.category][infosIndex.setting].type\r\n                ) ? (\r\n                  <input\r\n                    name=\"Boolean inputs\"\r\n                    type=\"checkbox\"\r\n                    checked={createValue(\"bool\")}\r\n                    onChange={(e) => updateValue(!createValue(\"bool\"))}\r\n                  />\r\n                ) : getPresetInfos()[infosIndex.category][infosIndex.setting]\r\n                    .choises ? (\r\n                  <select\r\n                    name=\"Multiple choises inputs\"\r\n                    value={createValue(\"select\")}\r\n                    onChange={(e) =>\r\n                      updateValue(\r\n                        getPresetInfos()[infosIndex.category][\r\n                          infosIndex.setting\r\n                        ].choises[\r\n                          Number(e.target.value) -\r\n                            getPresetInfos()[infosIndex.category][\r\n                              infosIndex.setting\r\n                            ].adder\r\n                        ]\r\n                      )\r\n                    }\r\n                  >\r\n                    {getPresetInfos()[infosIndex.category][\r\n                      infosIndex.setting\r\n                    ].choises.map((choise, i) => (\r\n                      <option\r\n                        key={i}\r\n                        value={\r\n                          i +\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].adder\r\n                        }\r\n                      >\r\n                        {choise}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ) : getPresetInfos()[infosIndex.category][infosIndex.setting]\r\n                    .max ? (\r\n                  <div className=\"preset-sliderFooter\">\r\n                    <small>\r\n                      {\r\n                        getPresetInfos()[infosIndex.category][\r\n                          infosIndex.setting\r\n                        ].min\r\n                      }\r\n                    </small>\r\n                    <div className=\"preset-sliderInput\">\r\n                      <input\r\n                        type=\"number\"\r\n                        name=\"Number Input\"\r\n                        value={createValue(\"number\")}\r\n                        onChange={(e) => {\r\n                          if (\r\n                            e.target.value <\r\n                              getPresetInfos()[infosIndex.category][\r\n                                infosIndex.setting\r\n                              ].min ||\r\n                            e.target.value >\r\n                              getPresetInfos()[infosIndex.category][\r\n                                infosIndex.setting\r\n                              ].max\r\n                          )\r\n                            return;\r\n                          return updateValue(Number(e.target.value));\r\n                        }}\r\n                        min={\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].min\r\n                        }\r\n                        max={\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].max\r\n                        }\r\n                      />\r\n                      <input\r\n                        type=\"range\"\r\n                        value={createValue(\"number\")}\r\n                        onChange={(e) => updateValue(Number(e.target.value))}\r\n                        min={\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].min\r\n                        }\r\n                        max={\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].max\r\n                        }\r\n                      />\r\n                    </div>\r\n                    <small>\r\n                      {\r\n                        getPresetInfos()[infosIndex.category][\r\n                          infosIndex.setting\r\n                        ].max\r\n                      }\r\n                    </small>\r\n                  </div>\r\n                ) : undefined}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <small>\r\n            {locale.preset.texts.info1}\r\n            <a\r\n              href={`data:text/json;charset=uft-8,${encodeURIComponent(\r\n                JSON.stringify(preset, null, 2)\r\n              )}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              download={\"CustomPreset.json\"}\r\n              onClick={() =>\r\n                console.log(\r\n                  \"Downloaded preset : \\n%c\" + JSON.stringify(preset, null, 2),\r\n                  \"color: #42f578\"\r\n                )\r\n              }\r\n            >\r\n              {locale.preset.texts.link}\r\n            </a>\r\n            {locale.preset.texts.info2}\r\n          </small>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Preset;\r\n"],"names":["presets","Example","Fast","Preset","_getPresetInfos$infos","locale","preset","setPreset","infosIndex","setInfosIndex","choosedPreset","setChoosedPreset","useContext","PageContext","getPresetInfos","presetArray","index","categories","configurations","push","settings","handleInfosIndexChange","e","array","categoryMax","length","settingMax","category","setting","createValue","info","_d$choises","categoryIndex","settingIndex","Object","keys","value","d","choises","indexOf","adder","updateValue","newValue","prevPreset","_jsx","className","children","_jsxs","texts","list","map","li","style","backgroundColor","onClick","handleChoosePreset","name","description","desc","i","countPages","count","current","pages","splice","concat","includes","type","checked","onChange","Number","target","choise","max","min","undefined","info1","href","encodeURIComponent","JSON","stringify","rel","download","console","log","link","info2"],"sourceRoot":""}