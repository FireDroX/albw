{"version":3,"file":"static/js/146.e488317b.chunk.js","mappings":"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","sources":["utils/presetInfos.js","pages/preset/Preset.jsx"],"sourcesContent":["export const presetInfos = {\r\n  logic: {\r\n    logic_mode: {\r\n      name: \"Logic Mode\",\r\n      description: [\r\n        \"Normal        - Standard gameplay, no tricky item use or glitches. If unsure, choose this.\",\r\n        \"Hard          - Adds tricks that aren't technically glitches. Lamp + Net considered as weapons. No glitches.\",\r\n        \"Glitched      - Includes the above plus a selection of easy-to-learn glitches.\",\r\n        'Adv. Glitched - Includes the above plus \"advanced\" glitches that may be a challenge to master.',\r\n        \"Hell          - Includes every known RTA-viable glitch, including the insane ones. Don't choose this.\",\r\n        \"No Logic      - Items are placed with no logic at all. Seeds are likely to not be completable.\",\r\n      ],\r\n      choises: [\"Normal\", \"Hard\", \"Glitched\", \"AdvGlitched\", \"Hell\", \"NoLogic\"],\r\n      adder: 1,\r\n    },\r\n    randomize_dungeon_prizes: {\r\n      name: \"Randomize Dungeon Prizes\",\r\n      description: [\r\n        \"This shuffles all Sage Portraits, Pendants, and the Charm among themselves.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    vanilla_charm: {\r\n      name: \"Vanilla Charm\",\r\n      description: [\r\n        \"Enabling this forces one of the two Pendant of Courage Upgrades to be in Zelda's Throne Room.\",\r\n        \"Otherwise, a random Sage Portrait or Pendant will be placed in Zelda's Throne Room.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    lc_requirement: {\r\n      name: \"Lorule Castle Requirement\",\r\n      description: [\r\n        \"Choose how many Portraits are needed to enter Lorule Castle and fight Yuganon:\",\r\n      ],\r\n      min: 0,\r\n      max: 7,\r\n    },\r\n    ped_requirement: {\r\n      name: \"Pedestal Requirement\",\r\n      description: [\r\n        \"Choose which Pendants are required to reach the Master Sword Pedestal:\",\r\n        \"Vanilla  - Only the Pendants of Power and Wisdom are required\",\r\n        \"Charmed  - All three Pendants are required, but Charm may substitute for the Pendant of Courage\",\r\n        \"Standard - All Pendants are required\",\r\n      ],\r\n      choises: [\"Vanilla\", \"Charmed\", \"Standard\"],\r\n      adder: 2,\r\n    },\r\n    hyrule_castle_setting: {\r\n      name: \"Hyrule Castle Setting\",\r\n      description: [\r\n        \"Choose how the Dungeon portion of Hyrule Castle should be handled:\",\r\n        \"Early Lorule Castle - Completing Hyrule Castle allows early access to Lorule Castle via the Trial's Door.\",\r\n        \"Closed              - The Dungeon is closed off completely, and removed from all logic.\",\r\n      ],\r\n      choises: [\"EarlyLoruleCastle\", \"Closed\"],\r\n      adder: 1,\r\n    },\r\n    nice_mode: {\r\n      name: \"Shuffle Nice Items\",\r\n      description: [\r\n        \"This shuffles a second progressive copy of each Ravio Item into the general item pool.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    super_items: {\r\n      name: \"Shuffle Super Items\",\r\n      description: [\r\n        \"This shuffles a second progressive copy of the Lamp and Net into the general item pool.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    reverse_sage_events: {\r\n      name: \"Reverse Sage Events\",\r\n      description: [\r\n        \"Ties Sage-related checks and events to actually rescuing that Sage.\",\r\n        \"Makes the following changes:\",\r\n        \"- Irene => Unlocks the Irene check (instead of Pendant of Courage)\",\r\n        \"- Rosso => Unlocks Rosso's House and his two checks (instead of Pendant of Courage)\",\r\n        \"- Oren  => Unlocks the Smooth Gem check and the Shady Guy Event\",\r\n        \"- Impa  => Unlocks the front door to Hyrule Castle\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    no_progression_enemies: {\r\n      name: \"No Progression Enemies\",\r\n      description: [\r\n        \"Removes Enemies from dungeons that are themselves Progression (e.g.: Bawbs, the bomb enemy).\",\r\n        \"Logic will be adjusted to require the player's items instead.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    start_with_merge: {\r\n      name: \"Start with Merge\",\r\n      description: [\r\n        \"Start with the ability to Merge into walls, without Ravio's Bracelet.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    bell_in_shop: {\r\n      name: \"Bell in Shop\",\r\n      description: [\"If enabled the Bell will be placed in Ravio's Shop.\"],\r\n      type: Boolean,\r\n    },\r\n    pouch_in_shop: {\r\n      name: \"Pouch in Shop\",\r\n      description: [\"If enabled the Pouch will be placed in Ravio's Shop.\"],\r\n      type: Boolean,\r\n    },\r\n    sword_in_shop: {\r\n      name: \"Sword in Shop\",\r\n      description: [\r\n        \"If enabled at least one Sword will be placed in Ravio's Shop.\",\r\n        \"Note: This option is incompatible with Swordless Mode, which removes all Swords from the game.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    boots_in_shop: {\r\n      name: \"Boots in Shop\",\r\n      description: [\r\n        \"If enabled the Pegasus Boots will be placed in Ravio's Shop.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    assured_weapon: {\r\n      name: \"Assured Weapon in Shop\",\r\n      description: [\r\n        \"If enabled at least one weapon is guaranteed to be placed in Ravio's Shop.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    maiamai_madness: {\r\n      name: \"Maiamai Madness\",\r\n      description: [\r\n        \"This shuffles Maiamai into the pool, adding 100 more locations.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    minigames_excluded: {\r\n      name: \"Exclude Minigames\",\r\n      description: [\r\n        \"Excludes the following: Octoball Derby, Dodge the Cuccos, Hyrule Hotfoot, Treacherous Tower, and both Rupee Rushes\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    skip_big_bomb_flower: {\r\n      name: \"Skip Big Bomb Flower\",\r\n      description: [\r\n        \"Skips the Big Bomb Flower by removing the 5 Big Rocks in Lorule Field.\",\r\n        \"(Does not affect Lorule Castle Bomb Trial)\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    skip_trials: {\r\n      name: \"Skip Trials\",\r\n      description: [\"Automatically opens the Lorule Castle Trials door.\"],\r\n      type: Boolean,\r\n    },\r\n    bow_of_light_in_castle: {\r\n      name: \"Bow of Light in Castle\",\r\n      description: [\r\n        \"Limits the Bow of Light's placement to somewhere in Lorule Castle (including possibly Zelda).\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    weather_vanes_activated: {\r\n      name: \"Pre-Activated Weather Vanes\",\r\n      description: [\r\n        \"Begin the game with all Weather Vanes activated.\",\r\n        \"The logic may expect players to use the Bell to reach otherwise unreachable locations this way.\",\r\n        \"Note: Trackers do not currently support this feature.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    dark_rooms_lampless: {\r\n      name: \"Dark Room Crossing (advanced)\",\r\n      description: [\r\n        \"If enabled the logic may expect players to cross Dark Rooms without the Lamp.\",\r\n        \"Not for beginners and those who like being able to see things.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    swordless_mode: {\r\n      name: \"Swordless Mode (advanced)\",\r\n      description: [\r\n        \"Removes *ALL* Swords from the game.\",\r\n        \"The Bug Net becomes a required item to play Dead Man's Volley against Yuga Ganon.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    hint_ghost_price: {\r\n      name: \"Hint Ghost Price\",\r\n      description: [\r\n        \"Set the price of Hints from a Hint Ghost:\",\r\n        \"Recommended Price: 30\",\r\n      ],\r\n      min: 0,\r\n      max: 9999,\r\n    },\r\n  },\r\n  options: {\r\n    chest_size_matches_contents: {\r\n      name: \"Chest Size Matches Contents\",\r\n      description: [\r\n        \"All chests containing progression or unique items will become large, and others will be made small.\",\r\n        \"Note: Some large chests will have a reduced hitbox to prevent negative gameplay interference.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n    night_mode: {\r\n      name: \"Night Mode\",\r\n      description: [\r\n        \"Enables certain shaders on the overworld that make it look like nighttime in Hyrule.\",\r\n      ],\r\n      type: Boolean,\r\n    },\r\n  },\r\n};\r\n","import \"./Preset.css\";\r\nimport { useState } from \"react\";\r\n\r\nimport { presetInfos } from \"../../utils/presetInfos\";\r\n\r\nimport Example from \"../../utils/presets/Example.json\";\r\nimport Fast from \"../../utils/presets/Fast.json\";\r\n\r\nconst presets = [Example, Fast, Example];\r\n\r\nconst Preset = () => {\r\n  const [choosedPreset, setChoosedPreset] = useState(2);\r\n  const [preset, setPreset] = useState(presets[choosedPreset]);\r\n  const [infosIndex, setInfosIndex] = useState({ category: 0, setting: 0 });\r\n\r\n  const getPresetInfos = () => {\r\n    const presetArray = [];\r\n    let index = 0;\r\n    for (const categories in presetInfos) {\r\n      presetArray.push([]);\r\n      for (const settings in presetInfos[categories]) {\r\n        presetArray[index].push(presetInfos[categories][settings]);\r\n      }\r\n      index++;\r\n    }\r\n    return presetArray;\r\n  };\r\n\r\n  const handleInfosIndexChange = (e) => {\r\n    const array = getPresetInfos();\r\n    const categoryMax = array.length - 1;\r\n    const settingMax = array[infosIndex.category].length - 1;\r\n    if (e === \"+\") {\r\n      if (\r\n        infosIndex.setting === settingMax &&\r\n        infosIndex.category < categoryMax\r\n      ) {\r\n        setInfosIndex({ category: infosIndex.category + 1, setting: 0 });\r\n      } else if (\r\n        infosIndex.setting < settingMax &&\r\n        infosIndex.category <= categoryMax\r\n      ) {\r\n        setInfosIndex({\r\n          category: infosIndex.category,\r\n          setting: infosIndex.setting + 1,\r\n        });\r\n      }\r\n    }\r\n    if (e === \"-\") {\r\n      if (infosIndex.setting === 0 && infosIndex.category !== 0) {\r\n        setInfosIndex({\r\n          category: infosIndex.category - 1,\r\n          setting: array[infosIndex.category - 1].length - 1,\r\n        });\r\n      } else if (infosIndex.setting !== 0) {\r\n        setInfosIndex({\r\n          category: infosIndex.category,\r\n          setting: infosIndex.setting - 1,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const countPages = () => {\r\n    const array = getPresetInfos();\r\n    let count = 0,\r\n      current = 0;\r\n    array.map((pages) => (count += pages.length));\r\n    array.splice(0, infosIndex.category + 1).map((pages, i) => {\r\n      if (infosIndex.category > i) return (current += pages.length);\r\n      else return (current += pages.splice(0, infosIndex.setting + 1).length);\r\n    });\r\n    return `${current}/${count}`;\r\n  };\r\n\r\n  const createValue = (info) => {\r\n    const categoryIndex = infosIndex.category;\r\n    const settingIndex = infosIndex.setting;\r\n    const category = Object.keys(preset)[categoryIndex];\r\n    const setting = Object.keys(preset[category])[settingIndex];\r\n    const value = preset[category][setting];\r\n    switch (info) {\r\n      case \"bool\":\r\n      case \"number\":\r\n        return value;\r\n      case \"select\":\r\n        const d = getPresetInfos()[categoryIndex][settingIndex];\r\n        return d.choises?.indexOf(value) + (d.adder || 0);\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const updateValue = (newValue) => {\r\n    const categoryIndex = infosIndex.category;\r\n    const settingIndex = infosIndex.setting;\r\n    const category = Object.keys(preset)[categoryIndex];\r\n    const setting = Object.keys(preset[category])[settingIndex];\r\n    setPreset((prevPreset) => ({\r\n      ...prevPreset,\r\n      [category]: {\r\n        ...prevPreset[category],\r\n        [setting]: newValue,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const handleChoosePreset = (index) => {\r\n    setChoosedPreset(index);\r\n    setPreset(presets[index]);\r\n  };\r\n\r\n  return (\r\n    <section className=\"App\">\r\n      <div>\r\n        <div className=\"preset-container\">\r\n          <div className=\"preset-list\">\r\n            <ul>\r\n              {[\"Default\", \"Fast\", \"Custom..\"].map((li, index) => (\r\n                <li\r\n                  key={index}\r\n                  style={{\r\n                    backgroundColor:\r\n                      index === choosedPreset ? \"var(--primary15)\" : \"inherit\",\r\n                  }}\r\n                  onClick={() => handleChoosePreset(index)}\r\n                >\r\n                  {li}\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n          <div className=\"preset-choises\">\r\n            <div className=\"preset-text\">\r\n              <h5>\r\n                {getPresetInfos()[infosIndex.category][infosIndex.setting]\r\n                  .name || \"Not Found\"}\r\n              </h5>\r\n              <div className=\"preset-desc\">\r\n                {getPresetInfos()[infosIndex.category][\r\n                  infosIndex.setting\r\n                ].description?.map((desc, i) => (\r\n                  <small key={i}>{desc}</small>\r\n                )) || <small>{\"Not Found\"}</small>}\r\n              </div>\r\n            </div>\r\n            <div className=\"preset-footer\">\r\n              <div className=\"preset-pagesFooter\">\r\n                <small className=\"preset-counter\">{countPages()}</small>\r\n                <div className=\"preset-btns\">\r\n                  <button onClick={() => handleInfosIndexChange(\"-\")}>\r\n                    <small>{\"-\"}</small>\r\n                  </button>\r\n                  <button onClick={() => handleInfosIndexChange(\"+\")}>\r\n                    <small>{\"+\"}</small>\r\n                  </button>\r\n                </div>\r\n              </div>\r\n              <div className=\"preset-inputFooter\">\r\n                {getPresetInfos()[infosIndex.category][infosIndex.setting]\r\n                  .type === Boolean ? (\r\n                  <input\r\n                    name=\"Boolean inputs\"\r\n                    type=\"checkbox\"\r\n                    checked={createValue(\"bool\")}\r\n                    onChange={(e) => updateValue(!createValue(\"bool\"))}\r\n                  />\r\n                ) : getPresetInfos()[infosIndex.category][infosIndex.setting]\r\n                    .choises ? (\r\n                  <select\r\n                    name=\"Multiple choises inputs\"\r\n                    value={createValue(\"select\")}\r\n                    onChange={(e) =>\r\n                      updateValue(\r\n                        getPresetInfos()[infosIndex.category][\r\n                          infosIndex.setting\r\n                        ].choises[\r\n                          Number(e.target.value) -\r\n                            getPresetInfos()[infosIndex.category][\r\n                              infosIndex.setting\r\n                            ].adder\r\n                        ]\r\n                      )\r\n                    }\r\n                  >\r\n                    {getPresetInfos()[infosIndex.category][\r\n                      infosIndex.setting\r\n                    ].choises.map((choise, i) => (\r\n                      <option\r\n                        key={i}\r\n                        value={\r\n                          i +\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].adder\r\n                        }\r\n                      >\r\n                        {choise}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                ) : getPresetInfos()[infosIndex.category][infosIndex.setting]\r\n                    .max ? (\r\n                  <div className=\"preset-sliderFooter\">\r\n                    <small>\r\n                      {\r\n                        getPresetInfos()[infosIndex.category][\r\n                          infosIndex.setting\r\n                        ].min\r\n                      }\r\n                    </small>\r\n                    <div className=\"preset-sliderInput\">\r\n                      <input\r\n                        type=\"number\"\r\n                        name=\"Number Input\"\r\n                        value={createValue(\"number\")}\r\n                        onChange={(e) => {\r\n                          if (\r\n                            e.target.value <\r\n                              getPresetInfos()[infosIndex.category][\r\n                                infosIndex.setting\r\n                              ].min ||\r\n                            e.target.value >\r\n                              getPresetInfos()[infosIndex.category][\r\n                                infosIndex.setting\r\n                              ].max\r\n                          )\r\n                            return;\r\n                          return updateValue(Number(e.target.value));\r\n                        }}\r\n                        min={\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].min\r\n                        }\r\n                        max={\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].max\r\n                        }\r\n                      />\r\n                      <input\r\n                        type=\"range\"\r\n                        value={createValue(\"number\")}\r\n                        onChange={(e) => updateValue(Number(e.target.value))}\r\n                        min={\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].min\r\n                        }\r\n                        max={\r\n                          getPresetInfos()[infosIndex.category][\r\n                            infosIndex.setting\r\n                          ].max\r\n                        }\r\n                      />\r\n                    </div>\r\n                    <small>\r\n                      {\r\n                        getPresetInfos()[infosIndex.category][\r\n                          infosIndex.setting\r\n                        ].max\r\n                      }\r\n                    </small>\r\n                  </div>\r\n                ) : undefined}\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <small>\r\n            Download the{\" \"}\r\n            <a\r\n              href={`data:text/json;charset=uft-8,${encodeURIComponent(\r\n                JSON.stringify(preset, null, 2)\r\n              )}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n              download={\"CustomPreset.json\"}\r\n              onClick={() =>\r\n                console.log(\r\n                  \"Downloaded preset : \\n%c\" + JSON.stringify(preset, null, 2),\r\n                  \"color: #42f578\"\r\n                )\r\n              }\r\n            >\r\n              preset\r\n            </a>{\" \"}\r\n            !\r\n          </small>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Preset;\r\n"],"names":["presetInfos","logic","logic_mode","name","description","choises","adder","randomize_dungeon_prizes","type","Boolean","vanilla_charm","lc_requirement","min","max","ped_requirement","hyrule_castle_setting","nice_mode","super_items","reverse_sage_events","no_progression_enemies","start_with_merge","bell_in_shop","pouch_in_shop","sword_in_shop","boots_in_shop","assured_weapon","maiamai_madness","minigames_excluded","skip_big_bomb_flower","skip_trials","bow_of_light_in_castle","weather_vanes_activated","dark_rooms_lampless","swordless_mode","hint_ghost_price","options","chest_size_matches_contents","night_mode","presets","Example","Fast","Preset","_getPresetInfos$infos","choosedPreset","setChoosedPreset","useState","preset","setPreset","infosIndex","setInfosIndex","category","setting","getPresetInfos","presetArray","index","categories","push","settings","handleInfosIndexChange","e","array","categoryMax","length","settingMax","createValue","info","_d$choises","categoryIndex","settingIndex","Object","keys","value","d","indexOf","updateValue","newValue","prevPreset","_jsx","className","children","_jsxs","map","li","style","backgroundColor","onClick","handleChoosePreset","desc","i","countPages","count","current","pages","splice","concat","checked","onChange","Number","target","choise","undefined","href","encodeURIComponent","JSON","stringify","rel","download","console","log"],"sourceRoot":""}