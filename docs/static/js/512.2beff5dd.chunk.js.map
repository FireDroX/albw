{"version":3,"file":"static/js/512.2beff5dd.chunk.js","mappings":"sLAQA,MAiGA,EAjGeA,KACb,MAAOC,EAAMC,IAAWC,EAAAA,EAAAA,eAASC,GAEjC,OACEC,EAAAA,EAAAA,KAAA,WAASC,UAAU,MAAKC,UACtBF,EAAAA,EAAAA,KAAA,OAAAE,cACYH,IAATH,GACCO,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,oBAAmBC,UAChCC,EAAAA,EAAAA,MAAA,SAAOC,QAAQ,cAAcH,UAAU,qBAAoBC,SAAA,EACzDF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAACK,EAAAA,IAAc,OAEjBL,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,UACzBF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,oCAERF,EAAAA,EAAAA,KAAA,SACEM,GAAG,cACHC,KAAK,OACLC,KAAK,2BACLC,SAAWC,IAAO,IAADC,EACf,MAAMf,EAAOc,EAAEE,OAAOC,MAAM,GAC5B,GAAQ,OAAJjB,QAAI,IAAJA,GAAU,QAANe,EAAJf,EAAMY,YAAI,IAAAG,GAAVA,EAAYG,SAAS,SAAU,CACjC,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAUC,IACf,IACE,MAAMC,EAAUC,KAAKC,MAAMH,EAAMN,OAAOU,QACxC,IAAIC,GAAW,EACf,CAAC,OAAQ,UAAW,UAAUC,SAASC,IAChCN,EAAQO,eAAeD,KAC1BF,GAAW,EACb,IAEGA,EACAI,MAAM,oCADI9B,EAAQsB,EAEzB,CAAE,MAAOS,GACPD,MAAM,uBAAyBC,EACjC,GAEFb,EAAOc,WAAWjC,EACpB,MACE+B,MACE,qEAEJ,UAKR3B,EAAAA,EAAAA,KAAA,MAAAE,SAAI,QACJC,EAAAA,EAAAA,MAAA,OACEF,UAAU,aACV6B,OAASpB,IAAO,IAADqB,EACbrB,EAAEsB,iBACF,MAAMC,EAAcvB,EAAEwB,aAAarB,MAAM,GACzC,GAAe,OAAXoB,QAAW,IAAXA,GAAiB,QAANF,EAAXE,EAAazB,YAAI,IAAAuB,GAAjBA,EAAmBjB,SAAS,SAAU,CACxC,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAUC,IACf,IACE,MAAMC,EAAUC,KAAKC,MAAMH,EAAMN,OAAOU,QACxC,IAAIC,GAAW,EACf,CAAC,OAAQ,UAAW,UAAUC,SAASC,IAChCN,EAAQO,eAAeD,KAC1BF,GAAW,EACb,IAEGA,EACAI,MAAM,oCADI9B,EAAQsB,EAEzB,CAAE,MAAOS,GACPD,MAAM,uBAAyBC,EACjC,GAEFb,EAAOc,WAAWI,EACpB,MACEN,MACE,qEAEJ,EAEFQ,WAAazB,GAAMA,EAAEsB,iBAAiB9B,SAAA,EAEtCF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAAaC,UAC1BF,EAAAA,EAAAA,KAACoC,EAAAA,IAAoB,OAEvBpC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,aAAYC,UACzBF,EAAAA,EAAAA,KAAA,QAAAE,SAAM,gCAKZF,EAAAA,EAAAA,KAACqC,EAAAA,EAAQ,CAACC,KAAM1C,EAAM2C,MAAO1C,OAGzB,C","sources":["pages/reader/Reader.jsx"],"sourcesContent":["import \"./Reader.css\";\r\nimport { useState } from \"react\";\r\n\r\nimport { BsFiletypeJson } from \"react-icons/bs\";\r\nimport { IoCloudUploadOutline } from \"react-icons/io5\";\r\n\r\nimport ReadSeed from \"../../components/ReadSeed/ReadSeed\";\r\n\r\nconst Reader = () => {\r\n  const [file, setFile] = useState(undefined);\r\n\r\n  return (\r\n    <section className=\"App\">\r\n      <div>\r\n        {file === undefined ? (\r\n          <div className=\"reader-imports\">\r\n            <div className=\"reader-choosefile\">\r\n              <label htmlFor=\"file-upload\" className=\"custum-file-upload\">\r\n                <div className=\"reader-icon\">\r\n                  <BsFiletypeJson />\r\n                </div>\r\n                <div className=\"reader-txt\">\r\n                  <span>Click to upload a JSON file.</span>\r\n                </div>\r\n                <input\r\n                  id=\"file-upload\"\r\n                  type=\"file\"\r\n                  name=\"Import JSON Spoiler Logs\"\r\n                  onChange={(e) => {\r\n                    const file = e.target.files[0];\r\n                    if (file?.name?.endsWith(\".json\")) {\r\n                      const reader = new FileReader();\r\n                      reader.onload = (event) => {\r\n                        try {\r\n                          const newData = JSON.parse(event.target.result);\r\n                          let dontPass = false;\r\n                          [\"seed\", \"version\", \"layout\"].forEach((prop) => {\r\n                            if (!newData.hasOwnProperty(prop)) {\r\n                              dontPass = true;\r\n                            }\r\n                          });\r\n                          if (!dontPass) setFile(newData);\r\n                          else alert(\"Required properties are missing.\");\r\n                        } catch (error) {\r\n                          alert(\"Error parsing JSON: \" + error);\r\n                        }\r\n                      };\r\n                      reader.readAsText(file);\r\n                    } else {\r\n                      alert(\r\n                        \"This type of file is not compatible. Please use only .json files !\"\r\n                      );\r\n                    }\r\n                  }}\r\n                />\r\n              </label>\r\n            </div>\r\n            <h4>OR</h4>\r\n            <div\r\n              className=\"reader-dnd\"\r\n              onDrop={(e) => {\r\n                e.preventDefault();\r\n                const droppedFile = e.dataTransfer.files[0];\r\n                if (droppedFile?.name?.endsWith(\".json\")) {\r\n                  const reader = new FileReader();\r\n                  reader.onload = (event) => {\r\n                    try {\r\n                      const newData = JSON.parse(event.target.result);\r\n                      let dontPass = false;\r\n                      [\"seed\", \"version\", \"layout\"].forEach((prop) => {\r\n                        if (!newData.hasOwnProperty(prop)) {\r\n                          dontPass = true;\r\n                        }\r\n                      });\r\n                      if (!dontPass) setFile(newData);\r\n                      else alert(\"Required properties are missing.\");\r\n                    } catch (error) {\r\n                      alert(\"Error parsing JSON: \" + error);\r\n                    }\r\n                  };\r\n                  reader.readAsText(droppedFile);\r\n                } else {\r\n                  alert(\r\n                    \"This type of file is not compatible. Please use only .json files !\"\r\n                  );\r\n                }\r\n              }}\r\n              onDragOver={(e) => e.preventDefault()}\r\n            >\r\n              <div className=\"reader-icon\">\r\n                <IoCloudUploadOutline />\r\n              </div>\r\n              <div className=\"reader-txt\">\r\n                <span>Drag and Drop it !</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <ReadSeed data={file} reset={setFile} />\r\n        )}\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Reader;\r\n"],"names":["Reader","file","setFile","useState","undefined","_jsx","className","children","_jsxs","htmlFor","BsFiletypeJson","id","type","name","onChange","e","_file$name","target","files","endsWith","reader","FileReader","onload","event","newData","JSON","parse","result","dontPass","forEach","prop","hasOwnProperty","alert","error","readAsText","onDrop","_droppedFile$name","preventDefault","droppedFile","dataTransfer","onDragOver","IoCloudUploadOutline","ReadSeed","data","reset"],"sourceRoot":""}